# -*- coding: utf-8 -*-
"""Stock price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FQouY1MwqJ4G46tVbdW8LK6h-oXDIKZd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

!pip install quandl  # Correct the package name to "quandl"

import quandl

quandl

data=quandl.get("NSE/TATAMOTORS")

data.head(10)

plt.figure()
plt.plot(data['Close'], label='Close')  # Update the column name
plt.legend()
plt.show()

data['open-close']= data['Open']-data['Close']
data['high-low']= data['High']-data['Low']
x=data[['open-close','high-low']]
y=np.where(data['Close'].shift(-1)>data['Close'],1,-1)
display(x)
display(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state= 44)

from sklearn.neighbors import KNeighborsClassifier
from sklearn import neighbors
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV

params= {'n_neighbors':[2,3,4,5,6,7,8,9]}  # Fix the typo here
knn= neighbors.KNeighborsClassifier()
model= GridSearchCV(knn,params,cv=5)
model.fit(x_train,y_train)

accuracy_train=accuracy_score(y_train,model.predict(x_train))
accuracy_test=accuracy_score(y_test,model.predict(x_test))

print ('Train accuracy result:%2f' %accuracy_train)
print ('Train accuracy result:%2f' %accuracy_train)

actual_predicted_result=pd.DataFrame({'actual':y_test,'predicted':model.predict(x_test)})
actual_predicted_result

Y=data['Close']

from sklearn.model_selection import train_test_split
x_train,x_test,Y_train,Y_test=train_test_split(x,Y,test_size=0.25,random_state= 44)

from sklearn.neighbors import KNeighborsRegressor
from sklearn import neighbors
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV

params= {'n_neighbors':[2,3,4,5,6,7,8,9]}  # Fix the typo here
knn= neighbors.KNeighborsRegressor()
model= GridSearchCV(knn,params,cv=5)
model.fit(x_train,Y_train)

Y_pred=model.predict(x_test)
# Y_test = Y_test.values.reshape(-1, 1)  # Remove this line, it's not needed
Y_pred = Y_pred.reshape(-1, 1)          # Y_pred likely already a NumPy array

# Concatenate the two arrays side by side
result = np.hstack((Y_test, Y_pred))
result



